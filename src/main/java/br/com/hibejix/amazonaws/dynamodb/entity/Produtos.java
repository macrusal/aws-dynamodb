package br.com.hibejix.amazonaws.dynamodb.entity;


import br.com.hibejix.amazonaws.dynamodb.adapter.DynamoDBAdapter;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;

import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PRODUTOS")
public class Produtos {

    private static final String PRODUTOS = System.getenv("PRODUTOS");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String uuid;
    private String nome;
    private String precoCompra;
    private String precoSugerido;
    private String precoVenda;

    public Produtos() {
        DynamoDBMapperConfig dynamoDBMapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(PRODUTOS))
                .build();

        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(dynamoDBMapperConfig);
    }

    @DynamoDBHashKey(attributeName = "uuid")
    @DynamoDBAutoGeneratedKey
    public String getUuid() {
        return uuid;
    }

    public void setUuid(String uuid) {
        this.uuid = uuid;
    }

    @DynamoDBAttribute(attributeName = "nome")
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    @DynamoDBAttribute(attributeName = "precoCompra")
    public String getPrecoCompra() {
        return precoCompra;
    }

    public void setPrecoCompra(String precoCompra) {
        this.precoCompra = precoCompra;
    }

    @DynamoDBAttribute(attributeName = "precoSugerido")
    public String getPrecoSugerido() {
        return precoSugerido;
    }

    public void setPrecoSugerido(String precoSugerido) {
        this.precoSugerido = precoSugerido;
    }

    @DynamoDBAttribute(attributeName = "precoVenda")
    public String getPrecoVenda() {
        return precoVenda;
    }

    public void setPrecoVenda(String precoVenda) {
        this.precoVenda = precoVenda;
    }

    @Override
    public String toString() {
        return String.format("Produtos [uuid=%s, nome=%s, precoCompra=%s, precovenda=%s, precoSugerido=%s]"
                , this.uuid, this.nome, this.precoCompra, this.precoVenda, this.precoSugerido);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable(PRODUTOS).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Produtos> list() throws IOException {
        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
        List<Produtos> produtos = this.mapper.scan(Produtos.class, scanExpression);
        for (Produtos produto : produtos) {
            logger.info("Produtos - list(): " + produto.toString());
        }
        return produtos;
    }

    public Produtos get(String uuid) throws IOException {
        Produtos produtos = null;

        HashMap<String, AttributeValue> attributeValue = new HashMap<String, AttributeValue>();
        attributeValue.put(":v1", new AttributeValue().withS(uuid));

        DynamoDBQueryExpression<Produtos> queryExpression = new DynamoDBQueryExpression<Produtos>()
                .withKeyConditionExpression("uuid = :v1")
                .withExpressionAttributeValues(attributeValue);

        PaginatedQueryList<Produtos> paginatedQueryList = this.mapper.query(Produtos.class, queryExpression);

        if (paginatedQueryList.size() > 0) {
            produtos = paginatedQueryList.get(0);
            logger.info("Produtos - get(): produtos - " +produtos.toString());
        } else {
            logger.info("Produtos - get(): produtos - Não encontrado!!!");
        }

        return produtos;
    }

    public void save(Produtos produtos) throws IOException {
        logger.info("Produtos - save(): " +produtos.toString());
        this.mapper.save(produtos);
    }

    public Boolean delete(String uuid) throws IOException {

        Produtos produtos = null;
        produtos = get(uuid);
        if(produtos != null) {
            logger.info("Produtos - delete(): " +produtos.toString());
            this.mapper.delete(produtos);
        } else {
            logger.info("Produtos - delete(): produtos - Produto não existe!!!");
            return false;
        }
        return true;
    }
}
